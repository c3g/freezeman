# Generated by Django 3.0.6 on 2020-05-11 20:51

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import fms_core.schema_validators
import re

def create_admin_user(apps, schema_editor):
    User = apps.get_model('auth', 'User')
    User.objects.create(username="biobankadmin", is_superuser=True, is_staff=True, is_active=True)


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RunPython(
            create_admin_user,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.CreateModel(
            name='Biosample',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('alias', models.CharField(help_text='Alternative biosample name given by the collaborator or customer.', max_length=200, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9\\-_]{1,200}$'))])),
                ('collection_site', models.CharField(blank=True, help_text='The facility designated for the collection of samples.', max_length=200, null=True)),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Container',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('kind', models.CharField(choices=[('axiom 96-format array pmra', 'axiom 96-format array pmra'), ('axiom 96-format array ukbb', 'axiom 96-format array ukbb'), ('infinium epic 8 beadchip', 'infinium epic 8 beadchip'), ('infinium gs 24 beadchip', 'infinium gs 24 beadchip'), ('dnbseq-g400 flowcell', 'dnbseq-g400 flowcell'), ('dnbseq-t7 flowcell', 'dnbseq-t7 flowcell'), ('illumina-novaseq-x-1.5b flowcell', 'illumina-novaseq-x-1.5b flowcell'), ('illumina-novaseq-x-10b flowcell', 'illumina-novaseq-x-10b flowcell'), ('illumina-novaseq-x-25b flowcell', 'illumina-novaseq-x-25b flowcell'), ('illumina-novaseq-sp flowcell', 'illumina-novaseq-sp flowcell'), ('illumina-novaseq-s1 flowcell', 'illumina-novaseq-s1 flowcell'), ('illumina-novaseq-s2 flowcell', 'illumina-novaseq-s2 flowcell'), ('illumina-novaseq-s4 flowcell', 'illumina-novaseq-s4 flowcell'), ('illumina-miseq-v2 flowcell', 'illumina-miseq-v2 flowcell'), ('illumina-miseq-v3 flowcell', 'illumina-miseq-v3 flowcell'), ('illumina-miseq-micro flowcell', 'illumina-miseq-micro flowcell'), ('illumina-miseq-nano flowcell', 'illumina-miseq-nano flowcell'), ('illumina-iseq-100 flowcell', 'illumina-iseq-100 flowcell'), ('tube', 'tube'), ('tube strip 2x1', 'tube strip 2x1'), ('tube strip 3x1', 'tube strip 3x1'), ('tube strip 4x1', 'tube strip 4x1'), ('tube strip 5x1', 'tube strip 5x1'), ('tube strip 6x1', 'tube strip 6x1'), ('tube strip 7x1', 'tube strip 7x1'), ('tube strip 8x1', 'tube strip 8x1'), ('96-well plate', '96-well plate'), ('384-well plate', '384-well plate'), ('tube box 3x3', 'tube box 3x3'), ('tube box 6x6', 'tube box 6x6'), ('tube box 7x7', 'tube box 7x7'), ('tube box 8x8', 'tube box 8x8'), ('tube box 9x9', 'tube box 9x9'), ('tube box 10x10', 'tube box 10x10'), ('tube box 21x10', 'tube box 21x10'), ('tube rack 4x6', 'tube rack 4x6'), ('tube rack 8x12', 'tube rack 8x12'), ('box', 'box'), ('drawer', 'drawer'), ('freezer rack 2x4', 'freezer rack 2x4'), ('freezer rack 3x4', 'freezer rack 3x4'), ('freezer rack 4x4', 'freezer rack 4x4'), ('freezer rack 4x6', 'freezer rack 4x6'), ('freezer rack 5x4', 'freezer rack 5x4'), ('freezer rack 6x4', 'freezer rack 6x4'), ('freezer rack 7x4', 'freezer rack 7x4'), ('freezer rack 10x5', 'freezer rack 10x5'), ('freezer rack 8x6', 'freezer rack 8x6'), ('freezer rack 11x6', 'freezer rack 11x6'), ('freezer rack 16x6', 'freezer rack 16x6'), ('freezer rack 11x7', 'freezer rack 11x7'), ('freezer 3 shelves', 'freezer 3 shelves'), ('freezer 4 shelves', 'freezer 4 shelves'), ('freezer 5 shelves', 'freezer 5 shelves'), ('room', 'room'), ('site', 'site')], help_text='What kind of container this is. Dictates the coordinate system and other container-specific properties.', max_length=40)),
                ('name', models.CharField(help_text='Unique name for the container.', max_length=200, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.\\-_]{1,200}$'))])),
                ('barcode', models.CharField(help_text='Unique container barcode.', max_length=200, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[\\S]{1,200}$'))])),
                ('comment', models.TextField(blank=True, help_text='Other relevant information about the container.')),
                ('update_comment', models.TextField(blank=True, help_text='Comment describing the latest updates made to the container. Change this whenever updates are made.')),
            ],
        ),
        migrations.CreateModel(
            name='Coordinate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('name', models.CharField(help_text='Unique alphanumeric name to identify a coordinate in a container.', max_length=10, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[A-Z]+[0-9]+$'))])),
                ('column', models.PositiveIntegerField(help_text='Numeric value of the container coordinate column.')),
                ('row', models.PositiveIntegerField(help_text='Numeric value of the container coordinate row.')),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('lane', models.PositiveIntegerField(help_text='Coordinates of the lane in a container')),
                ('metric_report_url', models.CharField(blank=True, help_text='URL to the run processing metrics report.', max_length=4096, null=True)),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DerivedBySample',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('volume_ratio', models.DecimalField(decimal_places=15, help_text='Volume ratio in pools.', max_digits=16)),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DerivedSample',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('experimental_group', models.JSONField(blank=True, default=list, help_text='Sample group having some common characteristics. It is the way to designate a subgroup within a study.', validators=[fms_core.schema_validators.JsonSchemaValidator({'$id': 'fms:experimental_group', '$schema': 'http://json-schema.org/draft-07/schema#', 'description': 'Schema used to define experimental groups for a sample.', 'items': {'minLength': 1, 'type': 'string'}, 'title': 'Experimental group schema', 'type': 'array', 'uniqueItems': True}, formats=None)])),
                ('biosample', models.ForeignKey(help_text='Biosample associated to this DerivedSample', on_delete=django.db.models.deletion.PROTECT, related_name='derived_samples', to='fms_core.biosample')),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('derived_from', models.ForeignKey(blank=True, help_text='Derived sample from which this derived sample was derived.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='derived_to', to='fms_core.derivedsample')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IdGenerator',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='ImportedFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('filename', models.CharField(max_length=500)),
                ('location', models.CharField(max_length=600)),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Index',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('name', models.CharField(help_text='The name of the index.', max_length=200, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.\\-_]{1,200}$'))])),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('name', models.CharField(help_text='This technology used to measure the library. Acceptable values are listed at the ENA: https:\\/\\/ena-docs.readthedocs.io/en/latest/submit/reads/webin-cli.html?highlight=library_strategy#platform', max_length=200, unique=True)),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Process',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('comment', models.TextField(blank=True, help_text='Relevant information about the process.')),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('imported_template', models.ForeignKey(blank=True, help_text='Template used for submission.', null=True, on_delete=django.db.models.deletion.PROTECT, to='fms_core.importedfile')),
                ('parent_process', models.ForeignKey(blank=True, help_text='Process in which this sub-process is contained', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='child_process', to='fms_core.process')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProcessMeasurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('execution_date', models.DateField(help_text='Date of execution of the process.')),
                ('volume_used', models.DecimalField(blank=True, decimal_places=3, help_text='Volume of the source sample used, in µL.', max_digits=20, null=True)),
                ('comment', models.TextField(blank=True, help_text='Relevant information about the process info.')),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('process', models.ForeignKey(help_text='Process', on_delete=django.db.models.deletion.PROTECT, related_name='process_measurement', to='fms_core.process')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('name', models.CharField(help_text='The name of the project.', max_length=200, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.\\-_]{1,200}$'))])),
                ('principal_investigator', models.CharField(blank=True, help_text='The principal investigator of the project.', max_length=200)),
                ('requestor_name', models.CharField(blank=True, help_text='The name of the requestor of the project.', max_length=200)),
                ('requestor_email', models.CharField(blank=True, help_text='The email of the requestor of the project.', max_length=200, validators=[django.core.validators.EmailValidator()])),
                ('targeted_end_date', models.DateField(blank=True, help_text='Targeted date to conclude the project.', null=True)),
                ('status', models.CharField(choices=[('Open', 'Open'), ('Closed', 'Closed')], default='Open', help_text='The status of the project.', max_length=20)),
                ('external_id', models.CharField(blank=True, help_text='Identifier to connect to an external system.', max_length=200, null=True)),
                ('external_name', models.CharField(blank=True, help_text='Original project name used by external client.', max_length=200, null=True)),
                ('comment', models.TextField(blank=True, help_text='Other relevant information about the project.')),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PropertyType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('name', models.CharField(help_text='The name of the property.', max_length=200, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.\\-_ ]{1,200}$'))])),
                ('value_type', models.CharField(choices=[('int', 'int'), ('float', 'float'), ('bool', 'bool'), ('str', 'str')], help_text='Enumerated type to define value type.', max_length=20)),
                ('is_optional', models.BooleanField(default=False, help_text='Whether this property is optional or not.')),
                ('object_id', models.BigIntegerField()),
                ('content_type', models.ForeignKey(limit_choices_to=models.Q(('app_label', 'fms_core'), ('model', 'protocol')), on_delete=django.db.models.deletion.PROTECT, to='contenttypes.contenttype')),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Protocol',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('name', models.CharField(help_text='Unique identifier for the protocol.', max_length=200, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReferenceGenome',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('assembly_name', models.CharField(help_text='Assembly name of the reference genome.', max_length=200, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.\\-_]{1,200}$'))])),
                ('synonym', models.CharField(blank=True, help_text='Other name of the reference genome.', max_length=200, null=True, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.\\-_]{1,200}$'))])),
                ('genbank_id', models.CharField(blank=True, help_text='GenBank accession number of the reference genome.', max_length=200, null=True, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.\\-_]{1,200}$'))])),
                ('refseq_id', models.CharField(blank=True, help_text='RefSeq identifier of the reference genome.', max_length=200, null=True, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.\\-_]{1,200}$'))])),
                ('size', models.DecimalField(decimal_places=0, help_text='Number of base pairs of the reference genome.', max_digits=20)),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('name', models.CharField(help_text='Sample name.', max_length=200, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9\\-_]{1,200}$'))])),
                ('volume', models.DecimalField(decimal_places=3, help_text='Current volume of the sample, in µL.', max_digits=20)),
                ('concentration', models.DecimalField(blank=True, decimal_places=3, help_text='Concentration in ng/µL. Required for DNA).', max_digits=20, null=True, verbose_name='concentration in ng/µL')),
                ('fragment_size', models.PositiveIntegerField(blank=True, help_text='Average size of the nucleic acid strands in base pairs.', null=True)),
                ('depleted', models.BooleanField(default=False, help_text='Whether this sample has been depleted.')),
                ('creation_date', models.DateField(help_text='Date of the sample reception or extraction.')),
                ('comment', models.TextField(blank=True, help_text='Other relevant information about the biosample.')),
                ('quality_flag', models.BooleanField(blank=True, choices=[(True, 'Passed'), (False, 'Failed')], help_text='Quality flag of the sample.', max_length=20, null=True)),
                ('quantity_flag', models.BooleanField(blank=True, choices=[(True, 'Passed'), (False, 'Failed')], help_text='Quantity flag of the sample.', max_length=20, null=True)),
                ('identity_flag', models.BooleanField(blank=True, choices=[(True, 'Passed'), (False, 'Failed')], help_text='Identity flag of the sample.', max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='SampleIdentity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('conclusive', models.BooleanField(default=False, help_text='Flag indicating if the identity qc was conclusive.')),
                ('predicted_sex', models.CharField(blank=True, choices=[('M', 'M'), ('F', 'F'), ('Unknown', 'Unknown')], help_text='Sex of the sample.', max_length=10, null=True)),
                ('biosample', models.OneToOneField(help_text='Biosample for the identity.', on_delete=django.db.models.deletion.PROTECT, related_name='sample_identity', to='fms_core.biosample')),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SampleNextStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('sample', models.ForeignKey(help_text='The sample queued to workflows.', on_delete=django.db.models.deletion.PROTECT, related_name='sample_next_steps', to='fms_core.sample')),
            ],
        ),
        migrations.CreateModel(
            name='Sequence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('value', models.CharField(blank=True, help_text='The nucleotide string defining the sequence.', max_length=500, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[ATCGU]{0,500}$'))])),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Step',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('name', models.CharField(help_text='Step name.', max_length=200, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.\\-_)( ]{1,200}$'))])),
                ('expected_sample_type', models.CharField(choices=[('ANY', 'Any'), ('UNEXTRACTED_SAMPLE', 'Unextracted sample'), ('EXTRACTED_SAMPLE', 'Extracted sample'), ('SAMPLE', 'Sample'), ('LIBRARY', 'Library'), ('POOL', 'Pooled library')], default='ANY', help_text='The acceptable sample type for the step.', max_length=200)),
                ('type', models.CharField(choices=[('PROTOCOL', 'Protocol'), ('AUTOMATION', 'Automation'), ('INTEGRATION', 'Integration')], help_text='Type of step.', max_length=200)),
                ('needs_placement', models.BooleanField(default=True, help_text='Samples on this step need a destination container and coordinates assigned.')),
                ('needs_planning', models.BooleanField(default=False, help_text='Step has a planning template to fill before the main template.')),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('protocol', models.ForeignKey(blank=True, help_text='Protocol for the step.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='steps', to='fms_core.protocol')),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StepOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('order', models.PositiveIntegerField(help_text='Ordinal value of the step in the workflow (starting at 1).')),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('next_step_order', models.ForeignKey(blank=True, help_text='The next step following the one defined here.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='previous_step_order', to='fms_core.steporder')),
                ('step', models.ForeignKey(help_text='The step of the step order.', on_delete=django.db.models.deletion.PROTECT, related_name='steps_order', to='fms_core.step')),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Workflow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('name', models.CharField(help_text='Worflow name.', max_length=200, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.\\-_)( ]{1,200}$'))])),
                ('structure', models.CharField(help_text='Worflow structure.', max_length=200, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.\\-_)( ]{1,200}$'))])),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('steps', models.ManyToManyField(blank=True, related_name='workflows', through='fms_core.StepOrder', to='fms_core.step')),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Taxon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('name', models.CharField(help_text='Taxon scientific name.', max_length=200, unique=True)),
                ('ncbi_id', models.PositiveBigIntegerField(help_text='Numerical identifier used by the NCBI taxonomy catalog.', unique=True)),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('default_reference_genome', models.ForeignKey(blank=True, help_text='Default reference genome for the taxon when creating individuals.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='default_for_taxons', to='fms_core.referencegenome')),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Study',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('letter', models.CharField(help_text='Letter ordinally chosen to identify a study.', max_length=1, validators=[django.core.validators.RegexValidator(re.compile('^[A-Z]$'))])),
                ('start', models.PositiveIntegerField(help_text='Index to the order of the start of the assigned workflow for this study.')),
                ('end', models.PositiveIntegerField(help_text='Index to the order of the end of the assigned workflow for this study.')),
                ('description', models.TextField(blank=True, help_text='Description of the study.', null=True)),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(help_text='Study project.', on_delete=django.db.models.deletion.PROTECT, related_name='studies', to='fms_core.project')),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
                ('workflow', models.ForeignKey(help_text='Workflow assigned to the study.', on_delete=django.db.models.deletion.PROTECT, related_name='studies', to='fms_core.workflow')),
            ],
        ),
        migrations.CreateModel(
            name='StepSpecification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('name', models.CharField(help_text='Name used to describe the value.', max_length=200, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.\\-_]{1,200}$'))])),
                ('sheet_name', models.CharField(blank=True, help_text='Name of the step template sheet.', max_length=200, null=True, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.\\-_ ]{1,200}$'))])),
                ('column_name', models.CharField(blank=True, help_text='Name of the step template column.', max_length=200, null=True, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.\\-_ ]{1,200}$'))])),
                ('value', models.CharField(help_text='Value of the step specification', max_length=200, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.\\-_ ]{1,200}$'))])),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('step', models.ForeignKey(help_text='The step of the step specification.', on_delete=django.db.models.deletion.PROTECT, related_name='step_specifications', to='fms_core.step')),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='steporder',
            name='workflow',
            field=models.ForeignKey(help_text='Workflow of the step order.', on_delete=django.db.models.deletion.PROTECT, related_name='steps_order', to='fms_core.workflow'),
        ),
        migrations.CreateModel(
            name='StepHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('workflow_action', models.CharField(choices=[('NEXT_STEP', 'Step complete - Move to next step'), ('DEQUEUE_SAMPLE', 'Sample failed - Remove sample from study workflow'), ('REPEAT_STEP', 'Repeat step - Move to next step and repeat current step'), ('REPEAT_QC_STEP', 'Repeat QC step - Repeat current QC step'), ('IGNORE_WORKFLOW', 'Ignore workflow - Do not register as part of a workflow')], default='NEXT_STEP', help_text='Workflow action that was performed on the sample after step completion.', max_length=30)),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('process_measurement', models.ForeignKey(blank=True, help_text='Process measurement associated to the study step.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='StepHistory', to='fms_core.processmeasurement')),
                ('sample', models.ForeignKey(help_text='Source sample that completed the step.', on_delete=django.db.models.deletion.PROTECT, related_name='StepHistory', to='fms_core.sample')),
                ('step_order', models.ForeignKey(help_text='Step order in the study that is associated to the process measurement.', on_delete=django.db.models.deletion.PROTECT, related_name='StepHistory', to='fms_core.steporder')),
                ('study', models.ForeignKey(help_text='Study associated to the process measurement.', on_delete=django.db.models.deletion.PROTECT, related_name='StepHistory', to='fms_core.study')),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SequenceByIndex5Prime',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('index', models.ForeignKey(help_text='5 primer indices associated', on_delete=django.db.models.deletion.PROTECT, related_name='sequence_5prime_association', to='fms_core.index')),
                ('sequence', models.ForeignKey(help_text='Sequences associated', on_delete=django.db.models.deletion.PROTECT, related_name='index_5prime_association', to='fms_core.sequence')),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SequenceByIndex3Prime',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('index', models.ForeignKey(help_text='3 primer indices associated', on_delete=django.db.models.deletion.PROTECT, related_name='sequence_3prime_association', to='fms_core.index')),
                ('sequence', models.ForeignKey(help_text='Sequences associated', on_delete=django.db.models.deletion.PROTECT, related_name='index_3prime_association', to='fms_core.sequence')),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SampleNextStepByStudy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('sample_next_step', models.ForeignKey(help_text='Sample next step associated to the study instance.', on_delete=django.db.models.deletion.PROTECT, related_name='sample_next_step_by_study', to='fms_core.samplenextstep')),
                ('step_order', models.ForeignKey(help_text='Step order for the sample queued to a given study.', on_delete=django.db.models.deletion.PROTECT, related_name='sample_next_step_by_study', to='fms_core.steporder')),
                ('study', models.ForeignKey(help_text='Study associated to the sample next step instance.', on_delete=django.db.models.deletion.PROTECT, related_name='sample_next_step_by_study', to='fms_core.study')),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='samplenextstep',
            name='step',
            field=models.ForeignKey(help_text='The next step a sample has to complete in the study.', on_delete=django.db.models.deletion.PROTECT, related_name='samples_next_step', to='fms_core.step'),
        ),
        migrations.AddField(
            model_name='samplenextstep',
            name='studies',
            field=models.ManyToManyField(blank=True, related_name='samples_next_steps', through='fms_core.SampleNextStepByStudy', to='fms_core.study'),
        ),
        migrations.AddField(
            model_name='samplenextstep',
            name='updated_by',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='SampleMetadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('name', models.CharField(help_text='The name of the metadata.', max_length=200, validators=[django.core.validators.RegexValidator(message="Only alphanumeric characters, periods, dashes and underscores are allowed when naming metadata fields. Note that double underscores i.e '__' are not allowed.", regex=re.compile('^(?!.*__)[a-zA-Z0-9.\\-_]{1,200}$'))])),
                ('value', models.CharField(help_text='The value of the metadata.', max_length=2000)),
                ('biosample', models.ForeignKey(help_text='Biosample associated to this metadata.', on_delete=django.db.models.deletion.PROTECT, related_name='metadata', to='fms_core.biosample')),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SampleLineage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('child', models.ForeignKey(help_text='Child sample.', on_delete=django.db.models.deletion.PROTECT, related_name='child_sample', to='fms_core.sample')),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(help_text='Parent sample.', on_delete=django.db.models.deletion.PROTECT, related_name='parent_sample', to='fms_core.sample')),
                ('process_measurement', models.ForeignKey(help_text='process used for sample creation.', on_delete=django.db.models.deletion.PROTECT, related_name='lineage', to='fms_core.processmeasurement')),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SampleKind',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('name', models.CharField(help_text='Biological material collected from study subject during the conduct of a genomic study project.', max_length=200, unique=True)),
                ('molecule_ontology_curie', models.CharField(blank=True, help_text='SO ontology term to describe a molecule, such as ‘SO:0000991’ (‘genomic_DNA’).', max_length=20)),
                ('is_extracted', models.BooleanField(help_text='Indicator to identify kinds that were extracted. Sample will have tissue source.')),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SampleIdentityMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('matching_site_ratio', models.DecimalField(decimal_places=5, help_text='Ratio of the compared sites that are matching.', max_digits=6)),
                ('compared_sites', models.PositiveIntegerField(help_text='Number of marker sites that have a value for both samples.')),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('matched', models.ForeignKey(help_text='Match found to be referencing this sample identity.', on_delete=django.db.models.deletion.PROTECT, related_name='matched_identity_match', to='fms_core.sampleidentity')),
                ('tested', models.ForeignKey(help_text='Match found while testing this sample identity.', on_delete=django.db.models.deletion.PROTECT, related_name='tested_identity_match', to='fms_core.sampleidentity')),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='sampleidentity',
            name='identity_matches',
            field=models.ManyToManyField(blank=True, through='fms_core.SampleIdentityMatch', to='fms_core.sampleidentity'),
        ),
        migrations.AddField(
            model_name='sampleidentity',
            name='updated_by',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='sample',
            name='child_of',
            field=models.ManyToManyField(blank=True, related_name='parent_of', through='fms_core.SampleLineage', to='fms_core.sample'),
        ),
        migrations.AddField(
            model_name='sample',
            name='container',
            field=models.ForeignKey(help_text='Container in which the sample is placed.', limit_choices_to={'kind__in': ('axiom 96-format array pmra', 'axiom 96-format array ukbb', 'infinium epic 8 beadchip', 'infinium gs 24 beadchip', 'dnbseq-g400 flowcell', 'dnbseq-t7 flowcell', 'illumina-novaseq-x-1.5b flowcell', 'illumina-novaseq-x-10b flowcell', 'illumina-novaseq-x-25b flowcell', 'illumina-novaseq-sp flowcell', 'illumina-novaseq-s1 flowcell', 'illumina-novaseq-s2 flowcell', 'illumina-novaseq-s4 flowcell', 'illumina-miseq-v2 flowcell', 'illumina-miseq-v3 flowcell', 'illumina-miseq-micro flowcell', 'illumina-miseq-nano flowcell', 'illumina-iseq-100 flowcell', 'tube', 'tube strip 2x1', 'tube strip 3x1', 'tube strip 4x1', 'tube strip 5x1', 'tube strip 6x1', 'tube strip 7x1', 'tube strip 8x1', '96-well plate', '384-well plate')}, on_delete=django.db.models.deletion.PROTECT, related_name='samples', to='fms_core.container'),
        ),
        migrations.AddField(
            model_name='sample',
            name='coordinate',
            field=models.ForeignKey(blank=True, help_text='Coordinates of the sample in a sample holding container. Only applicable for containers that directly store samples with coordinates, e.g. plates.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='samples', to='fms_core.coordinate'),
        ),
        migrations.AddField(
            model_name='sample',
            name='created_by',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='sample',
            name='derived_samples',
            field=models.ManyToManyField(blank=True, related_name='samples', through='fms_core.DerivedBySample', to='fms_core.derivedsample'),
        ),
        migrations.AddField(
            model_name='sample',
            name='updated_by',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='RunType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('name', models.CharField(help_text='Name of the run type.', max_length=200, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.\\-_]{1,200}$'))])),
                ('needs_run_processing', models.BooleanField(default=False, help_text='Run processing is expected for this run type.')),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('platform', models.ForeignKey(help_text='Platform used by the run type.', on_delete=django.db.models.deletion.PROTECT, related_name='run_types', to='fms_core.platform')),
                ('protocol', models.ForeignKey(help_text='Protocol used by the experiment run.', on_delete=django.db.models.deletion.PROTECT, related_name='run_types', to='fms_core.protocol')),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='referencegenome',
            name='taxon',
            field=models.ForeignKey(help_text='Taxon associated to the reference genome.', on_delete=django.db.models.deletion.PROTECT, related_name='reference_genomes', to='fms_core.taxon'),
        ),
        migrations.AddField(
            model_name='referencegenome',
            name='updated_by',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Readset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('name', models.CharField(help_text='External name that identifies the readset if the run did not come from Freezeman.', max_length=200)),
                ('sample_name', models.CharField(help_text='Name that identifies the sample if the run did not come from Freezeman.', max_length=200)),
                ('release_status', models.IntegerField(choices=[(0, 'Available'), (1, 'Released'), (2, 'Blocked')], default=0, help_text='The release status of the file.')),
                ('release_status_timestamp', models.DateTimeField(blank=True, help_text='The last time the release status of the file was changed.', null=True)),
                ('validation_status', models.IntegerField(choices=[(0, 'Available'), (1, 'Passed'), (2, 'Failed')], default=0, help_text='The run validation status of the file.')),
                ('validation_status_timestamp', models.DateTimeField(blank=True, help_text='The last time the run validation status of the file was changed.', null=True)),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('dataset', models.ForeignKey(help_text='Dataset of the readset.', on_delete=django.db.models.deletion.PROTECT, related_name='readsets', to='fms_core.dataset')),
                ('derived_sample', models.ForeignKey(blank=True, help_text='Derived sample matching the readset.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='readsets', to='fms_core.derivedsample')),
                ('released_by', models.ForeignKey(blank=True, help_text='User that released the readset data to the client.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='released_readsets', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
                ('validated_by', models.ForeignKey(blank=True, help_text='User that validated the readset data.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='validated_readsets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProtocolBySubprotocol',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('child', models.ForeignKey(help_text='Child protocol', on_delete=django.db.models.deletion.CASCADE, related_name='child_protocol', to='fms_core.protocol')),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(help_text='Parent protocol', on_delete=django.db.models.deletion.CASCADE, related_name='parent_protocol', to='fms_core.protocol')),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='protocol',
            name='child_of',
            field=models.ManyToManyField(blank=True, related_name='parent_of', through='fms_core.ProtocolBySubprotocol', to='fms_core.protocol'),
        ),
        migrations.AddField(
            model_name='protocol',
            name='created_by',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='protocol',
            name='updated_by',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='PropertyValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('value', models.JSONField(blank=True, help_text='Property value.', validators=[fms_core.schema_validators.JsonSchemaValidator({'$id': 'fms:property_value', '$schema': 'http://json-schema.org/draft-07/schema#', 'description': 'Schema used to define the value in PropertyValue.', 'title': 'PropertyValue value schema', 'type': ['number', 'string', 'boolean']}, formats=None)], verbose_name='Property value')),
                ('object_id', models.BigIntegerField()),
                ('content_type', models.ForeignKey(limit_choices_to=models.Q(models.Q(('app_label', 'fms_core'), ('model', 'process')), models.Q(('app_label', 'fms_core'), ('model', 'processmeasurement')), _connector='OR'), on_delete=django.db.models.deletion.PROTECT, to='contenttypes.contenttype')),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('property_type', models.ForeignKey(help_text='Property type.', on_delete=django.db.models.deletion.PROTECT, related_name='property_values', to='fms_core.propertytype')),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='processmeasurement',
            name='source_sample',
            field=models.ForeignKey(help_text='Source Sample', on_delete=django.db.models.deletion.PROTECT, related_name='process_measurement', to='fms_core.sample'),
        ),
        migrations.AddField(
            model_name='processmeasurement',
            name='updated_by',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='process',
            name='protocol',
            field=models.ForeignKey(help_text='Protocol', on_delete=django.db.models.deletion.PROTECT, related_name='processes', to='fms_core.protocol'),
        ),
        migrations.AddField(
            model_name='process',
            name='updated_by',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Metric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('name', models.CharField(help_text='Name for a metric.', max_length=200)),
                ('metric_group', models.CharField(help_text='Grouping of metrics by categories.', max_length=200)),
                ('value_numeric', models.DecimalField(blank=True, decimal_places=20, help_text='Metric numerical value.', max_digits=40, null=True)),
                ('value_string', models.CharField(blank=True, help_text='Metric string value.', max_length=1000, null=True)),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('readset', models.ForeignKey(help_text='Readset for the metric.', on_delete=django.db.models.deletion.PROTECT, related_name='metrics', to='fms_core.readset')),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LibraryType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('name', models.CharField(help_text='The name of the library type.', max_length=200, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.\\-_]{1,200}$'))])),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LibrarySelection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('name', models.CharField(help_text='The name of the library selection protocol.', max_length=200, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.\\-_]{1,200}$'))])),
                ('target', models.CharField(help_text='The target of the selection protocol.', max_length=200, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.\\-_]{1,200}$'))])),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Library',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('strandedness', models.CharField(choices=[('Double stranded', 'Double stranded'), ('Single stranded', 'Single stranded')], help_text='Number of Library NA strands.', max_length=20)),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('index', models.ForeignKey(help_text='The index associated to this library.', on_delete=django.db.models.deletion.PROTECT, related_name='libraries', to='fms_core.index')),
                ('library_selection', models.ForeignKey(blank=True, help_text='Library selection used on the library.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='libraries', to='fms_core.libraryselection')),
                ('library_type', models.ForeignKey(help_text='Library type describing the library.', on_delete=django.db.models.deletion.PROTECT, related_name='libraries', to='fms_core.librarytype')),
                ('platform', models.ForeignKey(help_text='The platform for which the library has been prepared.', on_delete=django.db.models.deletion.PROTECT, related_name='libraries', to='fms_core.platform')),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InstrumentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('type', models.CharField(help_text='The product make. Acceptable values are listed at the ENA: https:\\/\\/ena-docs.readthedocs.io/en/latest/submit/reads/webin-cli.html?highlight=library_strategy#permitted-values-for-instrument', max_length=200, unique=True)),
                ('index_read_5_prime', models.CharField(choices=[('FORWARD', 'FORWARD'), ('REVERSE', 'REVERSE')], help_text='Instrument specific read direction for the index part at the 5 prime end of the sequence.', max_length=10)),
                ('index_read_3_prime', models.CharField(choices=[('FORWARD', 'FORWARD'), ('REVERSE', 'REVERSE')], help_text='Instrument specific read direction for the index part at the 3 prime end of the sequence.', max_length=10)),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('platform', models.ForeignKey(help_text='Platform', on_delete=django.db.models.deletion.PROTECT, related_name='instrument_types', to='fms_core.platform')),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Instrument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('name', models.CharField(help_text='Unique name for the instrument instance.', max_length=200, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.\\-_]{1,200}$'))])),
                ('serial_id', models.CharField(help_text='Internal identifier for the instrument.', max_length=200, unique=True)),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('type', models.ForeignKey(help_text='Instrument type', on_delete=django.db.models.deletion.PROTECT, related_name='instruments', to='fms_core.instrumenttype')),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Individual',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('name', models.CharField(help_text='Unique identifier for the individual.', max_length=200, unique=True)),
                ('sex', models.CharField(choices=[('M', 'M'), ('F', 'F'), ('Unknown', 'Unknown')], help_text='Sex of the individual.', max_length=10)),
                ('pedigree', models.CharField(blank=True, help_text='Common ID to associate children and parents.', max_length=200)),
                ('cohort', models.CharField(blank=True, help_text='Name to group some individuals in a specific study.', max_length=200)),
                ('alias', models.CharField(blank=True, help_text='Original individual name used by external client.', max_length=200, null=True)),
                ('is_generic', models.BooleanField(default=False, help_text='Flag indicating a generic individual used to replace undefined individuals that share characteristics.')),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('father', models.ForeignKey(blank=True, help_text='Father of the individual.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='father_of', to='fms_core.individual')),
                ('mother', models.ForeignKey(blank=True, help_text='Mother of the individual.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='mother_of', to='fms_core.individual')),
                ('reference_genome', models.ForeignKey(blank=True, help_text='Reference genome used to analyze samples.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='individuals', to='fms_core.referencegenome')),
                ('taxon', models.ForeignKey(help_text='Taxonomic entry associated to the individual.', on_delete=django.db.models.deletion.PROTECT, to='fms_core.taxon')),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='IndexStructure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('name', models.CharField(help_text='The name of the index structure.', max_length=200, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.\\-_]{1,200}$'))])),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('flanker_3prime_forward', models.ForeignKey(help_text='Flanker on the 3 prime forward direction', on_delete=django.db.models.deletion.PROTECT, related_name='flanker_3prime_forward', to='fms_core.sequence')),
                ('flanker_3prime_reverse', models.ForeignKey(help_text='Flanker on the 3 prime reverse direction', on_delete=django.db.models.deletion.PROTECT, related_name='flanker_3prime_reverse', to='fms_core.sequence')),
                ('flanker_5prime_forward', models.ForeignKey(help_text='Flanker on the 5 prime forward direction', on_delete=django.db.models.deletion.PROTECT, related_name='flanker_5prime_forward', to='fms_core.sequence')),
                ('flanker_5prime_reverse', models.ForeignKey(help_text='Flanker on the 5 prime reverse direction', on_delete=django.db.models.deletion.PROTECT, related_name='flanker_5prime_reverse', to='fms_core.sequence')),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IndexSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('name', models.CharField(help_text='The name of the index set.', max_length=200, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.\\-_]{1,200}$'))])),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IndexBySet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('index', models.ForeignKey(help_text='Index associated', on_delete=django.db.models.deletion.PROTECT, related_name='index_set_association', to='fms_core.index')),
                ('index_set', models.ForeignKey(help_text='Index Set associated', on_delete=django.db.models.deletion.PROTECT, related_name='index_association', to='fms_core.indexset')),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='index',
            name='index_sets',
            field=models.ManyToManyField(related_name='set_indices', through='fms_core.IndexBySet', to='fms_core.indexset'),
        ),
        migrations.AddField(
            model_name='index',
            name='index_structure',
            field=models.ForeignKey(help_text='The index structure of the index', on_delete=django.db.models.deletion.PROTECT, related_name='indices', to='fms_core.indexstructure'),
        ),
        migrations.AddField(
            model_name='index',
            name='sequences_3prime',
            field=models.ManyToManyField(related_name='indices_3prime', through='fms_core.SequenceByIndex3Prime', to='fms_core.sequence'),
        ),
        migrations.AddField(
            model_name='index',
            name='sequences_5prime',
            field=models.ManyToManyField(related_name='indices_5prime', through='fms_core.SequenceByIndex5Prime', to='fms_core.sequence'),
        ),
        migrations.AddField(
            model_name='index',
            name='updated_by',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ExperimentRun',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('name', models.CharField(help_text='Name of the run.', max_length=200, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.\\-_]{1,200}$'))])),
                ('external_name', models.CharField(blank=True, help_text='Name given to the run by the instrument.', max_length=200, null=True, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.\\-_]{1,200}$'))])),
                ('start_date', models.DateField(help_text='Date the experiment run was started (submitted by template).')),
                ('end_time', models.DateTimeField(blank=True, help_text='Time at which the experiment run completed (set by API call).', null=True)),
                ('run_processing_launch_time', models.DateTimeField(blank=True, help_text='Last time the run processing was launched, if it has been launched for the experiment run.', null=True)),
                ('run_processing_start_time', models.DateTimeField(blank=True, help_text='Last time the run processing actually started for the experiment run.', null=True)),
                ('run_processing_end_time', models.DateTimeField(blank=True, help_text='Last time the run processing completed for the experiment run.', null=True)),
                ('container', models.OneToOneField(help_text='Container', limit_choices_to={'kind__in': ('axiom 96-format array pmra', 'axiom 96-format array ukbb', 'infinium epic 8 beadchip', 'infinium gs 24 beadchip', 'dnbseq-g400 flowcell', 'dnbseq-t7 flowcell', 'illumina-novaseq-x-1.5b flowcell', 'illumina-novaseq-x-10b flowcell', 'illumina-novaseq-x-25b flowcell', 'illumina-novaseq-sp flowcell', 'illumina-novaseq-s1 flowcell', 'illumina-novaseq-s2 flowcell', 'illumina-novaseq-s4 flowcell', 'illumina-miseq-v2 flowcell', 'illumina-miseq-v3 flowcell', 'illumina-miseq-micro flowcell', 'illumina-miseq-nano flowcell', 'illumina-iseq-100 flowcell')}, on_delete=django.db.models.deletion.PROTECT, related_name='experiment_run', to='fms_core.container')),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('instrument', models.ForeignKey(help_text='Instrument', on_delete=django.db.models.deletion.PROTECT, related_name='experiment_runs', to='fms_core.instrument')),
                ('process', models.ForeignKey(help_text='Main process associated to this experiment', on_delete=django.db.models.deletion.PROTECT, related_name='experiment_runs', to='fms_core.process')),
                ('run_type', models.ForeignKey(help_text='Run type', on_delete=django.db.models.deletion.PROTECT, related_name='experiment_runs', to='fms_core.runtype')),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='derivedsample',
            name='library',
            field=models.OneToOneField(blank=True, help_text='Library associated to this Derived Sample.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='derived_sample', to='fms_core.library'),
        ),
        migrations.AddField(
            model_name='derivedsample',
            name='sample_kind',
            field=models.ForeignKey(help_text='Biological material collected from study subject during the conduct of a genomic study project.', on_delete=django.db.models.deletion.PROTECT, related_name='kind_derived_samples', to='fms_core.samplekind'),
        ),
        migrations.AddField(
            model_name='derivedsample',
            name='tissue_source',
            field=models.ForeignKey(blank=True, help_text='Can only be specified if the sample kind is DNA or RNA (i.e. is an extracted sample kind).', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='source_derived_samples', to='fms_core.samplekind'),
        ),
        migrations.AddField(
            model_name='derivedsample',
            name='updated_by',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='derivedbysample',
            name='derived_sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='derived_by_samples', to='fms_core.derivedsample'),
        ),
        migrations.AddField(
            model_name='derivedbysample',
            name='project',
            field=models.ForeignKey(blank=True, help_text='Project linked to the derived sample - sample pair.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='project_derived_by_samples', to='fms_core.project'),
        ),
        migrations.AddField(
            model_name='derivedbysample',
            name='sample',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='derived_by_samples', to='fms_core.sample'),
        ),
        migrations.AddField(
            model_name='derivedbysample',
            name='updated_by',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='DatasetFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('file_path', models.CharField(help_text='Path to the dataset file.', max_length=4096)),
                ('size', models.BigIntegerField(help_text='Size of the dataset file.')),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('readset', models.ForeignKey(help_text='Readset of the file.', on_delete=django.db.models.deletion.PROTECT, related_name='files', to='fms_core.readset')),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='dataset',
            name='experiment_run',
            field=models.ForeignKey(help_text='Experiment run matching the dataset.', on_delete=django.db.models.deletion.PROTECT, related_name='datasets', to='fms_core.experimentrun'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='project',
            field=models.ForeignKey(help_text='Project of the dataset.', on_delete=django.db.models.deletion.PROTECT, related_name='datasets', to='fms_core.project'),
        ),
        migrations.AddField(
            model_name='dataset',
            name='updated_by',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='container',
            name='coordinate',
            field=models.ForeignKey(blank=True, help_text='Coordinates of this container within the parent container.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='containers', to='fms_core.coordinate'),
        ),
        migrations.AddField(
            model_name='container',
            name='created_by',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='container',
            name='location',
            field=models.ForeignKey(blank=True, help_text='An existing (parent) container this container is located inside of.', limit_choices_to={'kind__in': ('tube box 3x3', 'tube box 6x6', 'tube box 7x7', 'tube box 8x8', 'tube box 9x9', 'tube box 10x10', 'tube box 21x10', 'tube rack 4x6', 'tube rack 8x12', 'box', 'drawer', 'freezer rack 2x4', 'freezer rack 3x4', 'freezer rack 4x4', 'freezer rack 4x6', 'freezer rack 5x4', 'freezer rack 6x4', 'freezer rack 7x4', 'freezer rack 10x5', 'freezer rack 8x6', 'freezer rack 11x6', 'freezer rack 16x6', 'freezer rack 11x7', 'freezer 3 shelves', 'freezer 4 shelves', 'freezer 5 shelves', 'room', 'site')}, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='children', to='fms_core.container'),
        ),
        migrations.AddField(
            model_name='container',
            name='updated_by',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='biosample',
            name='individual',
            field=models.ForeignKey(blank=True, help_text='Individual associated with the biosample.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='biosamples', to='fms_core.individual'),
        ),
        migrations.AddField(
            model_name='biosample',
            name='updated_by',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ArchivedComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date the instance was modified.')),
                ('deleted', models.BooleanField(default=False, help_text='Whether this instance has been deleted.')),
                ('object_id', models.BigIntegerField()),
                ('comment', models.TextField(help_text='Comment to be archived.')),
                ('content_type', models.ForeignKey(limit_choices_to=models.Q(('app_label', 'fms_core'), ('model', 'dataset')), on_delete=django.db.models.deletion.PROTECT, to='contenttypes.contenttype')),
                ('created_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_creation', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(app_label)s_%(class)s_modification', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='study',
            constraint=models.UniqueConstraint(fields=('letter', 'project_id'), name='study_letter_projectid_key'),
        ),
        migrations.AddIndex(
            model_name='steporder',
            index=models.Index(fields=['order', 'workflow'], name='steporder_order_workflow_idx'),
        ),
        migrations.AddConstraint(
            model_name='steporder',
            constraint=models.UniqueConstraint(fields=('order', 'workflow_id'), name='steporder_order_workflowid_key'),
        ),
        migrations.AddConstraint(
            model_name='stephistory',
            constraint=models.UniqueConstraint(fields=('study', 'step_order', 'process_measurement'), name='stephistory_study_steporder_processmeasurement_key'),
        ),
        migrations.AddIndex(
            model_name='samplenextstepbystudy',
            index=models.Index(fields=['sample_next_step', 'step_order', 'study'], name='samplenextstepbystudy_idx'),
        ),
        migrations.AddConstraint(
            model_name='samplenextstepbystudy',
            constraint=models.UniqueConstraint(fields=('study_id', 'step_order_id', 'sample_next_step_id'), name='samplenextstepbystudy_studyid_steporderid_samplenextstepid_key'),
        ),
        migrations.AddIndex(
            model_name='samplenextstep',
            index=models.Index(fields=['sample', 'step'], name='samplenextstep_sample_step_idx'),
        ),
        migrations.AddConstraint(
            model_name='samplenextstep',
            constraint=models.UniqueConstraint(fields=('step_id', 'sample_id'), name='samplenextstep_stepid_sampleid_key'),
        ),
        migrations.AddConstraint(
            model_name='samplemetadata',
            constraint=models.UniqueConstraint(fields=('name', 'biosample'), name='unique_metadata_name_by_biosample'),
        ),
        migrations.AddConstraint(
            model_name='sampleidentitymatch',
            constraint=models.UniqueConstraint(fields=('tested_id', 'matched_id'), name='sampleidentitymatch_testedid_matchedid_key'),
        ),
        migrations.AddIndex(
            model_name='sample',
            index=models.Index(fields=['name'], name='sample_name_idx'),
        ),
        migrations.AddIndex(
            model_name='sample',
            index=models.Index(fields=['creation_date'], name='sample_creationdate_idx'),
        ),
        migrations.AddConstraint(
            model_name='sample',
            constraint=models.UniqueConstraint(fields=('container', 'coordinate'), name='sample_container_coordinate_key'),
        ),
        migrations.AddConstraint(
            model_name='propertytype',
            constraint=models.UniqueConstraint(fields=('name', 'object_id'), name='property_per_protocol'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['name'], name='project_name_idx'),
        ),
        migrations.AddIndex(
            model_name='metric',
            index=models.Index(fields=['name'], name='metric_name_idx'),
        ),
        migrations.AddConstraint(
            model_name='libraryselection',
            constraint=models.UniqueConstraint(fields=('name', 'target'), name='libraryselection_name_target_key'),
        ),
        migrations.AddIndex(
            model_name='instrument',
            index=models.Index(fields=['type'], name='instrument_type_idx'),
        ),
        migrations.AddIndex(
            model_name='individual',
            index=models.Index(fields=['name'], name='individual_name_idx'),
        ),
        migrations.AddConstraint(
            model_name='indexbyset',
            constraint=models.UniqueConstraint(fields=('index_id', 'index_set_id'), name='indexbyset_indexid_indexsetid_key'),
        ),
        migrations.AddConstraint(
            model_name='derivedbysample',
            constraint=models.UniqueConstraint(fields=('derived_sample_id', 'sample_id'), name='derivedbysample_derivedsampleid_sampleid_key'),
        ),
        migrations.AddConstraint(
            model_name='datasetfile',
            constraint=models.UniqueConstraint(fields=('file_path',), name='Datasetfile_filepath_key'),
        ),
        migrations.AddConstraint(
            model_name='dataset',
            constraint=models.UniqueConstraint(fields=('project', 'experiment_run', 'lane'), name='dataset_project_experimentrun_lane_key'),
        ),
        migrations.AddIndex(
            model_name='coordinate',
            index=models.Index(fields=['name'], name='coordinate_name_idx'),
        ),
        migrations.AddIndex(
            model_name='container',
            index=models.Index(fields=['coordinate'], name='container_coordinate_idx'),
        ),
        migrations.AddIndex(
            model_name='container',
            index=models.Index(fields=['barcode'], name='container_barcode_idx'),
        ),
        migrations.AddIndex(
            model_name='container',
            index=models.Index(fields=['name'], name='container_name_idx'),
        ),
    ]
