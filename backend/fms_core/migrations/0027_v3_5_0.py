# Generated by Django 3.1 on 2021-10-21 21:20

from django.conf import settings
from django.db import migrations, models
from django.contrib.auth.models import User
import reversion

ADMIN_USERNAME = 'biobankadmin'


def create_mgi_T7_related_objects(apps, schema_editor):
    Platform = apps.get_model("fms_core", "Platform")
    InstrumentType = apps.get_model("fms_core", "InstrumentType")
    Instrument = apps.get_model("fms_core", "Instrument")
    RunType = apps.get_model("fms_core", "RunType")
    Protocol = apps.get_model("fms_core", "Protocol")
    PropertyType = apps.get_model("fms_core", "PropertyType")
    ContentType = apps.get_model('contenttypes', 'ContentType')

    with reversion.create_revision(manage_manually=True):
        admin_user = User.objects.get(username=ADMIN_USERNAME)
        admin_user_id = admin_user.id

        reversion.set_comment("Create objects related to MGI T7 experiment")
        reversion.set_user(admin_user)

        # Platform and InstrumentType already created for MGI T7
        platform = Platform.objects.get(name="DNBSEQ")

        # Instrument dictionary {NAME: TYPE} for creation
        INSTRUMENTS = {
            "01-Marie Curie": "DNBSEQ-G400",
            "02-Frida Kahlo": "DNBSEQ-G400",
            "03-Jennifer Doudna": "DNBSEQ-T7",
        }
        for name in INSTRUMENTS.keys():
            it = InstrumentType.objects.get(type=INSTRUMENTS[name])
            i = Instrument.objects.create(name=name,
                                          type=it,
                                          created_by_id=admin_user_id,
                                          updated_by_id=admin_user_id)
            reversion.add_to_revision(i)

        # Create PropertyType and Protocols
        PROPERTY_TYPES_BY_PROTOCOL = {
            "DNBSEQ Preparation": [("Flowcell Lot", "str"),
                                   ("Loading Method", "str"),
                                   ("Sequencer Side", "str"),
                                   ("Sequencer Kit Used", "str"),
                                   ("Sequencer Kit Lot", "str"),
                                   ("Load DNB Cartridge Lot", "str"),
                                   ("Primer Kit", "str"),
                                   ("Primer Kit Lot", "str"),
                                   ("Read 1 Cycles", "str"),
                                   ("Read 2 Cycles", "str"),
                                   ("Index 1 Cycles", "str"),
                                   ("Index 2 Cycles", "str"),
                                   ],
        }
        protocol_content_type = ContentType.objects.get_for_model(Protocol)

        for protocol_name in PROPERTY_TYPES_BY_PROTOCOL.keys():
            protocol = Protocol.objects.create(name=protocol_name,
                                               created_by_id=admin_user_id, updated_by_id=admin_user_id)
            reversion.add_to_revision(protocol)

            for (property, value_type) in PROPERTY_TYPES_BY_PROTOCOL[protocol_name]:
                is_optional = True if 'comment' in property.lower() else False

                pt = PropertyType.objects.create(name=property,
                                                 object_id=protocol.id,
                                                 content_type=protocol_content_type,
                                                 value_type=value_type,
                                                 is_optional=is_optional,
                                                 created_by_id=admin_user_id, updated_by_id=admin_user_id)
                reversion.add_to_revision(pt)

        # Create RunType MGI T7
        rt = RunType.objects.create(name="DNBSEQ",
                                    platform=platform,
                                    protocol=protocol,
                                    created_by_id=admin_user_id,
                                    updated_by_id=admin_user_id)
        reversion.add_to_revision(rt)


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('fms_core', '0026_v3_5_0'),
    ]

    operations = [
        # MGI T7 initial migration
        migrations.RunPython(
            create_mgi_T7_related_objects,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.AlterField(
            model_name='container',
            name='kind',
            field=models.CharField(choices=[('infinium gs 24 beadchip', 'infinium gs 24 beadchip'),
                                            ('dnbseq-g400 flowcell', 'dnbseq-g400 flowcell'),
                                            ('dnbseq-t7 flowcell', 'dnbseq-t7 flowcell'), ('tube', 'tube'),
                                            ('tube strip 2x1', 'tube strip 2x1'), ('tube strip 3x1', 'tube strip 3x1'),
                                            ('tube strip 4x1', 'tube strip 4x1'), ('tube strip 5x1', 'tube strip 5x1'),
                                            ('tube strip 6x1', 'tube strip 6x1'), ('tube strip 7x1', 'tube strip 7x1'),
                                            ('tube strip 8x1', 'tube strip 8x1'), ('96-well plate', '96-well plate'),
                                            ('384-well plate', '384-well plate'), ('tube box 3x3', 'tube box 3x3'),
                                            ('tube box 6x6', 'tube box 6x6'), ('tube box 7x7', 'tube box 7x7'),
                                            ('tube box 8x8', 'tube box 8x8'), ('tube box 9x9', 'tube box 9x9'),
                                            ('tube box 10x10', 'tube box 10x10'), ('tube rack 8x12', 'tube rack 8x12'),
                                            ('drawer', 'drawer'), ('freezer rack 2x4', 'freezer rack 2x4'),
                                            ('freezer rack 3x4', 'freezer rack 3x4'),
                                            ('freezer rack 4x4', 'freezer rack 4x4'),
                                            ('freezer rack 5x4', 'freezer rack 5x4'),
                                            ('freezer rack 6x4', 'freezer rack 6x4'),
                                            ('freezer rack 7x4', 'freezer rack 7x4'),
                                            ('freezer rack 10x5', 'freezer rack 10x5'),
                                            ('freezer rack 8x6', 'freezer rack 8x6'),
                                            ('freezer rack 11x6', 'freezer rack 11x6'),
                                            ('freezer rack 11x7', 'freezer rack 11x7'), 
                                            ('freezer 3 shelves', 'freezer 3 shelves'),
                                            ('freezer 4 shelves', 'freezer 4 shelves'),
                                            ('freezer 5 shelves', 'freezer 5 shelves'), ('room', 'room'),
                                            ('box', 'box')],
                                   help_text='What kind of container this is. Dictates the coordinate system and other container-specific properties.',
                                   max_length=25),
        ),
    ]
