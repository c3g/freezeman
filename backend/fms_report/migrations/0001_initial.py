# Generated by Django 4.2.4 on 2024-11-27 16:59

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('fms_core', '0067_v4_13_0'),
    ]

    operations = [
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Internal name by which a report can be identified.', max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProductionTracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('validation_timestamp', models.DateTimeField(blank=True, help_text='Timestamp of the validation status when the data was prepared.', null=True)),
                ('extracted_readset', models.OneToOneField(help_text='Readset for which the data has been prepared.', on_delete=django.db.models.deletion.PROTECT, related_name='production_tracking', to='fms_core.readset')),
            ],
        ),
        migrations.CreateModel(
            name='MetricField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the field containing a report metric.', max_length=100)),
                ('is_group', models.BooleanField(default=False, help_text='Flag indicating if the value can be a group for aggregation.')),
                ('aggregation', models.CharField(choices=[('SUM', 'Sum'), ('COUNT', 'Count'), ('MAX', 'Max'), ('MIN', 'Min')], help_text='Aggregation to use on this field.', max_length=100)),
                ('report', models.ForeignKey(help_text='Report to which the field is related.', on_delete=django.db.models.deletion.PROTECT, related_name='metric_fields', to='fms_report.report')),
            ],
        ),
        migrations.CreateModel(
            name='ProductionData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sequencing_date', models.DateField(help_text='Date the library was sequenced.')),
                ('library_creation_date', models.DateField(null=True, blank=True, help_text='Date the library was created.')),
                ('library_capture_date', models.DateField(null=True, blank=True, help_text='Date the library was captured.')),
                ('run_name', models.CharField(help_text='Name of the sequencing run.', max_length=200)),
                ('lane', models.PositiveIntegerField(help_text='Sequencing run lane.')),
                ('sample_name', models.CharField(help_text='Sample name.', max_length=200)),
                ('is_internal_library', models.BooleanField(default=False, help_text='Flag that indicates that a library was created locally.')),
                ('library_type', models.CharField(help_text='Name of the library type.', max_length=200)),
                ('library_selection', models.CharField(blank=True, help_text='Name of the library selection protocol.', max_length=200, null=True)),
                ('project', models.CharField(help_text='Name of the project.', max_length=200)),
                ('principal_investigator', models.CharField(null=True, blank=True, help_text='Principal investigator of the project.', max_length=200)),
                ('taxon', models.CharField(null=True, blank=True, help_text='Taxon scientific name.', max_length=200)),
                ('technology', models.CharField(help_text='Sequencing instrument type.', max_length=200)),
                ('reads', models.BigIntegerField(help_text='Number of reads generated during sequencing.')),
                ('bases', models.BigIntegerField(help_text='Number of bases read during sequencing.')),
                ('biosample', models.ForeignKey(help_text='Biosample used to generate the library.', on_delete=django.db.models.deletion.PROTECT, related_name='production_data', to='fms_core.biosample')),
                ('experiment_run', models.ForeignKey(help_text='Experiment run for current data row.', on_delete=django.db.models.deletion.PROTECT, related_name='production_data', to='fms_core.experimentrun')),
                ('library', models.ForeignKey(help_text='Derived sample that defines a library.', on_delete=django.db.models.deletion.PROTECT, related_name='production_data', to='fms_core.derivedsample')),
                ('library_batch', models.ForeignKey(null=True, blank=True, help_text='Process that generated the library.', on_delete=django.db.models.deletion.PROTECT, related_name='production_data', to='fms_core.process')),
                ('readset', models.OneToOneField(help_text='Readset for current data row.', on_delete=django.db.models.deletion.PROTECT, related_name='production_data', to='fms_core.readset')),
            ],
            options={
                'indexes': [models.Index(fields=['sequencing_date'], name='productiondata_seqdate_idx'), models.Index(fields=['library_type'], name='productiondata_librarytype_idx'), models.Index(fields=['project'], name='productiondata_project_idx'), models.Index(fields=['technology'], name='productiondata_technology_idx'), models.Index(fields=['taxon'], name='productiondata_taxon_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='productiondata',
            constraint=models.UniqueConstraint(fields=('experiment_run', 'library', 'lane'), name='productiondata_natural_key'),
        ),
    ]
