# Generated by Django 3.0.6 on 2020-05-11 20:51

from django.conf import settings
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import fms_core.schema_validators
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Container',
            fields=[
                ('kind', models.CharField(choices=[('96-well plate', '96-well plate'), ('384-well plate', '384-well plate'), ('tube', 'tube'), ('tube box 8x8', 'tube box 8x8'), ('tube box 9x9', 'tube box 9x9'), ('tube box 10x10', 'tube box 10x10'), ('tube rack 8x12', 'tube rack 8x12'), ('drawer', 'drawer'), ('freezer rack 4x4', 'freezer rack 4x4'), ('freezer rack 7x4', 'freezer rack 7x4'), ('freezer rack 8x6', 'freezer rack 8x6'), ('freezer 3 shelves', 'freezer 3 shelves'), ('freezer 5 shelves', 'freezer 5 shelves'), ('room', 'room'), ('box', 'box')], help_text='What kind of container this is. Dictates the coordinate system and other container-specific properties.', max_length=20)),
                ('name', models.CharField(help_text='Unique name for the container.', max_length=200, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.-_]+$'))])),
                ('barcode', models.CharField(help_text='Unique container barcode.', max_length=200, primary_key=True, serialize=False, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.-_]+$'))])),
                ('coordinates', models.CharField(blank=True, help_text='Coordinates of this container within the parent container.', max_length=20)),
                ('comment', models.TextField(blank=True, help_text='Other relevant information about the container.')),
                ('location', models.ForeignKey(blank=True, help_text='An existing (parent) container this container is located inside of.', limit_choices_to={'kind__in': ('tube box 8x8', 'tube box 9x9', 'tube box 10x10', 'tube rack 8x12', 'drawer', 'freezer rack 4x4', 'freezer rack 7x4', 'freezer rack 8x6', 'freezer 3 shelves', 'freezer 5 shelves', 'room', 'box')}, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='children', to='fms_core.Container')),
                ('update_comment', models.TextField(blank=True, help_text='Comment describing the latest updates made to the container. Change this whenever updates are made.')),
            ],
        ),
        migrations.CreateModel(
            name='Individual',
            fields=[
                ('id', models.CharField(help_text='Unique identifier for the individual.', max_length=200, primary_key=True, serialize=False)),
                ('taxon', models.CharField(choices=[('Homo sapiens', 'Homo sapiens'), ('Mus musculus', 'Mus musculus')], help_text='Taxonomic group of a species.', max_length=20)),
                ('sex', models.CharField(choices=[('M', 'M'), ('F', 'F'), ('Unknown', 'Unknown')], help_text='Sex of the individual.', max_length=10)),
                ('pedigree', models.CharField(blank=True, help_text='Common ID to associate children and parents.', max_length=200)),
                ('cohort', models.CharField(blank=True, help_text='Label to group some individuals in a specific study.', max_length=200)),
                ('father', models.ForeignKey(blank=True, help_text='Father of the individual.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='father_of', to='fms_core.Individual')),
                ('mother', models.ForeignKey(blank=True, help_text='Mother of the individual.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='mother_of', to='fms_core.Individual')),
            ],
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('biospecimen_type', models.CharField(choices=[('DNA', 'DNA'), ('RNA', 'RNA'), ('BLOOD', 'BLOOD'), ('SALIVA', 'SALIVA'), ('SWAB', 'SWAB')], help_text='Biological material collected from study subject during the conduct of a genomic study project.', max_length=200)),
                ('name', models.CharField(help_text='Sample name.', max_length=200, validators=[django.core.validators.RegexValidator(re.compile('^[a-zA-Z0-9.-_]+$'))])),
                ('alias', models.CharField(blank=True, help_text='Alternative sample name given by the collaborator or customer.', max_length=200)),
                ('volume_history', django.contrib.postgres.fields.jsonb.JSONField(help_text='Volume of the sample in µL.', validators=[fms_core.schema_validators.JsonSchemaValidator({'$id': 'fms:volume', '$schema': 'http://json-schema.org/draft-07/schema#', 'description': 'Schema used to define volume and its updates.', 'items': {'additionalProperties': False, 'else': {'not': {'required': ['extracted_sample_id']}}, 'if': {'properties': {'update_type': {'const': 'extraction'}}}, 'properties': {'date': {'format': 'date-time', 'type': 'string'}, 'extracted_sample_id': {'type': 'integer'}, 'update_type': {'enum': ['extraction', 'update'], 'type': 'string'}, 'volume_value': {'pattern': '^(\\d*\\.\\d+|\\d+(\\.\\d*)?)$', 'type': 'string'}}, 'required': ['update_type', 'volume_value', 'date'], 'then': {'required': ['extracted_sample_id']}, 'type': 'object'}, 'minItems': 1, 'title': 'Volume schema', 'type': 'array'}, formats=['date-time'])], verbose_name='volume history in µL')),
                ('concentration', models.DecimalField(blank=True, decimal_places=3, help_text='Concentration in ng/µL. Required for nucleic acid samples.', max_digits=20, null=True, verbose_name='concentration in ng/µL')),
                ('depleted', models.BooleanField(default=False, help_text='Whether this sample has been depleted.')),
                ('experimental_group', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=list, help_text='Sample group having some common characteristics. It is the way to designate a subgroup within a study.', validators=[fms_core.schema_validators.JsonSchemaValidator({'$id': 'fms:experimental_group', '$schema': 'http://json-schema.org/draft-07/schema#', 'description': 'Schema used to define experimental groups for a sample.', 'items': {'minLength': 1, 'type': 'string'}, 'title': 'Experimental group schema', 'type': 'array', 'uniqueItems': True}, formats=None)])),
                ('collection_site', models.CharField(help_text='The facility designated for the collection of samples.', max_length=200)),
                ('tissue_source', models.CharField(blank=True, choices=[('Blood', 'Blood'), ('Saliva', 'Saliva'), ('Tumor', 'Tumor'), ('Plasma', 'Plasma'), ('Buffy coat', 'Buffy coat'), ('Tail', 'Tail'), ('Cells', 'Cells')], help_text='Can only be specified if the biospecimen type is DNA or RNA.', max_length=200)),
                ('reception_date', models.DateField(default=django.utils.timezone.now, help_text='Date of the sample reception.')),
                ('phenotype', models.CharField(blank=True, help_text='Sample phenotype.', max_length=200)),
                ('comment', models.TextField(blank=True, help_text='Other relevant information about the sample.')),
                ('coordinates', models.CharField(blank=True, help_text='Coordinates of the sample in a parent container. Only applicable for containers that directly store samples with coordinates, e.g. plates.', max_length=10)),
                ('volume_used', models.DecimalField(blank=True, decimal_places=3, help_text='Volume of the original sample used for the extraction, in µL. Must be specified only for extracted nucleic acid samples.', max_digits=20, null=True)),
                ('container', models.ForeignKey(help_text='Designated location of the sample.', limit_choices_to={'kind__in': ('96-well plate', '384-well plate', 'tube')}, on_delete=django.db.models.deletion.PROTECT, related_name='samples', to='fms_core.Container')),
                ('extracted_from', models.ForeignKey(blank=True, help_text='The sample this sample was extracted from. Can only be specified for extracted nucleic acid samples.', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='extractions', to='fms_core.Sample')),
                ('individual', models.ForeignKey(help_text='Individual associated with the sample.', on_delete=django.db.models.deletion.PROTECT, to='fms_core.Individual')),
                ('update_comment', models.TextField(blank=True, help_text='Comment describing the latest updates made to the sample. Change this whenever updates are made.')),
            ],
            options={
                'unique_together': {('container', 'coordinates')},
            },
        ),
        migrations.CreateModel(
            name='ExtractedSample',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('fms_core.sample',),
            managers=[
                ('manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ContainerMove',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('fms_core.container',),
            managers=[
                ('manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='SampleUpdate',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('fms_core.sample',),
            managers=[
                ('manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ImportedFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(max_length=100)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('imported_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('location', models.CharField(max_length=200)),
            ],
        ),
    ]
